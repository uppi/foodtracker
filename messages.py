from collections import defaultdict

from telegram import InlineKeyboardMarkup, InlineKeyboardButton


def question_text(question, date):
    return (f'–û—Ü–µ–Ω–∏—Ç–µ {question.kind} {date}'
            f' –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 ({question.bad_description}) –¥–æ 5 ({question.good_description})')


RATE_EMOJIS = ["‚ùì", "‚õà", "üåß", "‚òÅÔ∏è", "üå§", "‚òÄÔ∏è"]


def _answer_str(i):
    if i in (1, 5):
        return str(i) + " " + RATE_EMOJIS[i]
    return str(i)


def question_markup(kind, date):
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(_answer_str(i), callback_data=f'{kind},{date},{i}') for i in range(1, 6)]]
    )


def resubmit_markup(date, kind):
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'{kind},{date},0')]]
    )


def _mean(values):
    if not values:
        return 0
    else:
        return sum(values) / len(values)


def stats_text(user_id, rate_storage, start_date, end_date):
    rates = rate_storage.get_rates(
        user_id, start_date, end_date
    )
    values_by_kind = defaultdict(list)
    for rate in rates:
        values_by_kind[rate.kind].append(rate.value)
    lines = list(sorted(f'{kind}: {_mean(values):.2f} {RATE_EMOJIS[int(round(_mean(values)))]}'
                        for kind, values in values_by_kind.items()))
    rates_str = "\n".join(["–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:"] + lines)
    return rates_str


def unsubscribed_message():
    return "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start"
